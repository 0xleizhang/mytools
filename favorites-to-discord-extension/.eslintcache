[{"/Users/lei.zhang/open-source/_seven4x/link/picker-chrome-extension/src/index.js":"1","/Users/lei.zhang/open-source/_seven4x/link/picker-chrome-extension/src/App.js":"2","/Users/lei.zhang/open-source/_seven4x/link/picker-chrome-extension/src/service.js":"3","/Users/lei.zhang/open-source/_seven4x/link/picker-chrome-extension/src/comps/SearchInput.js":"4","/Users/lei.zhang/open-source/_seven4x/link/picker-chrome-extension/src/comps/EditTagGroup.js":"5"},{"size":222,"mtime":1653445175096,"results":"6","hashOfConfig":"7"},{"size":5019,"mtime":1653445175096,"results":"8","hashOfConfig":"7"},{"size":1496,"mtime":1665208424517,"results":"9","hashOfConfig":"7"},{"size":3094,"mtime":1664879156276,"results":"10","hashOfConfig":"7"},{"size":3728,"mtime":1653445175096,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ozlovp",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/lei.zhang/open-source/_seven4x/link/picker-chrome-extension/src/index.js",[],"/Users/lei.zhang/open-source/_seven4x/link/picker-chrome-extension/src/App.js",["25","26"],"/*global chrome*/\nimport React, {useEffect, useState} from \"react\";\nimport \"./App.css\";\nimport \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\nimport {Button, Divider, Form, Input, message} from \"antd\";\nimport EditableTagGroup from \"./comps/EditTagGroup\";\nimport SearchInput from \"./comps/SearchInput\";\nimport {config, getInfo, saveLink} from \"./service\";\n\nconst {TextArea} = Input;\nconst LoginUrl = config.UrlPrefix + \"/login?from=chrome\"\n\nfunction App() {\n    const [form] = Form.useForm();\n    const [link, setLink] = useState({\n        title: \"\",\n        url: \"\",\n        comment: \"\",\n        topicId: \"\",\n        group: \"\",\n        tags: \"\",\n        from: 2,\n    });\n    const [isLogin, setIsLogin] = useState(false);\n\n    useEffect(() => {\n        getInfo()\n            .then((res) => {\n                if (res.ok) {\n                    setIsLogin(true);\n                } else {\n                    setIsLogin(false);\n                }\n                console.log(res);\n            })\n            .catch((err) => {\n                console.error(err);\n            });\n        chrome &&\n        chrome.tabs &&\n        chrome.tabs.query &&\n        chrome.tabs.query({active: true, currentWindow: true}, function (tabs) {\n            console.warn(tabs);\n            let tab = tabs[0];\n            form.setFieldsValue({\n                title: tab.title,\n            });\n            setLink((link) => {\n                return {...link, url: tab.url, title: tab.title};\n            });\n        });\n\n        return () => {\n            console.log(\"destory ....\");\n        };\n    }, []);\n\n    const onFinish = (values) => {\n        console.log(values);\n\n        //Êèê‰∫§Ë°®Âçï\n        link.comment = values[\"comment\"];\n        link.title = values[\"title\"];\n        console.log(link);\n        if (!isLogin) {\n            setTimeout(() => {\n                toLogin();\n            }, 300);\n            return;\n        }\n        saveLink(link).then((res) => {\n            //close pop html\n            if (!res.ok) {\n                if (res.msgId === \"link.repeat-in-same-topic\") {\n                    message.error(\"ÈáçÂ§çÊäïÈÄíÔºö\" + res.msgId + \"|\" + res.msg);\n                } else {\n                    message.error(\"‰øùÂ≠òÂ§±Ë¥•Ôºö\" + res.msgId + \"|\" + res.msg);\n\n                }\n            } else {\n                message.info(\"ÊäïÁ®øÊàêÂäü‚ù§Ô∏è\");\n            }\n        });\n    };\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n    const toLogin = () => {\n        chrome.tabs.create({url: LoginUrl});\n    };\n\n    return (\n        <div className=\"App\">\n            <Form\n                onFinish={onFinish}\n                name=\"control-hooks\"\n                onFinishFailed={onFinishFailed}\n                form={form}\n            >\n                <Form.Item>\n                    <SearchInput\n                        placeholder=\"ÈÄâÊã©ÊäïÁ®øÁöÑ‰∏ªÈ¢ò\"\n                        onChange={(value) => {\n                            console.log(value);\n\n                            setLink((link) => {\n                                let newLink = {...link, topicId: value};\n                                console.log(newLink);\n                                return newLink;\n                            });\n                        }}\n                    />\n                </Form.Item>\n                <Form.Item name=\"title\" rules={[{required: true, message: \"Ê†áÈ¢ò\"}]}>\n                    <TextArea placeholder=\"üá®üá≥\" autoSize/>\n                </Form.Item>\n                <Form.Item\n                    name=\"comment\"\n                    rules={[{required: false, message: \"ËæìÂÖ•ËØÑËÆ∫\"}]}\n                >\n                    <TextArea placeholder=\"ËØ¥ÁÇπ‰ªÄ‰πàÂêß\" autoSize={{minRows: 2}}/>\n                </Form.Item>\n                <Form.Item name=\"tags\">\n                    <EditableTagGroup\n                        onChange={(tags) => {\n                            console.log(tags.join(\",\"));\n                            //‚ö†Ô∏èÔºöËøôÈáåÂøÖÈ°ªËøôÊ†∑ÊêûË¶Å‰∏çÁÑ∂‰ºöÊúâÂπ∂ÂèëÂºÇÂ∏∏\n                            setLink((link) => {\n                                let newLink = {...link, tags: tags.join(\",\")};\n                                console.log(newLink);\n                                return newLink;\n                            });\n                        }}\n                    />\n                </Form.Item>\n                <Divider/>\n\n                <Form.Item>\n                    {isLogin\n                        ? <Button type=\"primary\" htmlType=\"submit\">\n                            ‰øùÂ≠ò\n                        </Button>\n                        : <Button className=\"login-btn\" onClick={toLogin}>\n                            ÁôªÈôÜ\n                        </Button>}\n                </Form.Item>\n            </Form>\n\n            <Divider/>\n\n            <a href=\"#\" onClick={() => {\n                chrome.tabs.create({url: config.UrlPrefix + \"/\"});\n            }}>È¶ñÈ°µ</a>\n        </div>\n    );\n}\n\nexport default App;\n","/Users/lei.zhang/open-source/_seven4x/link/picker-chrome-extension/src/service.js",[],"/Users/lei.zhang/open-source/_seven4x/link/picker-chrome-extension/src/comps/SearchInput.js",["27"],"import React, {useEffect, useState} from \"react\";\nimport {Select} from \"antd\";\nimport * as ls from \"local-storage\";\nimport {searchTopicRequest as searchRequest} from \"../service\";\nimport './SearchInput.css'\n\nconst {Option, OptGroup} = Select;\n\n\nlet timeout;\nlet currentValue;\nconst MAX_LIMIT = 7;\n\nfunction searchTopic(value, callback) {\n  if (timeout) {\n    console.log(\"clearTimeout\");\n    clearTimeout(timeout);\n    timeout = null;\n  }\n  currentValue = value;\n\n  function search() {\n    searchRequest(value).then((d) => {\n      if (currentValue === value) {\n        const { data } = d;\n        const result = [];\n        data.forEach((r) => {\n          result.push({\n            value: r.id,\n            text: r.name,\n            shortCode: r.shortCode\n          });\n        });\n        callback(result);\n      }\n    });\n  }\n\n  timeout = setTimeout(search, 500);\n}\n\nfunction SearchInput(props) {\n  const { onChange } = props;\n  const [data, setData] = useState([]);\n  const [value, setValue] = useState();\n  const [used, setUsed] = useState([]);\n  const handleSearch = (value) => {\n    if (value) {\n      searchTopic(value, (data) => setData(data));\n    } else {\n      setData([]);\n    }\n  };\n\n  const handleChange = (val) => {\n    if (value === val.value) {\n      return;\n    }\n    setValue(val.value);\n    onChange(val.value);\n    let filted = used.filter((p) => p.value !== val.value);\n    let newUsed = [{\n      value: val.value,\n      text: val.label.props.children[0].props.children,\n      shortCode: val.label.props.children[1].props.children\n    }, ...filted];\n    newUsed = newUsed.slice(0, MAX_LIMIT);\n    setUsed(newUsed);\n    ls.set(\"TOPIC_USED\", newUsed);\n  };\n\n  useEffect(() => {\n    let lsdata = ls.get(\"TOPIC_USED\");\n    console.log(\"init used\");\n    if (Array.isArray(lsdata)) {\n      if (lsdata.length > 0) {\n        setUsed(lsdata);\n        setValue(lsdata[0].value);\n        onChange(lsdata[0].value);\n      }\n      return;\n    }\n\n    //‰øùÂ≠ò\n    return () => {\n      console.log(\"save used\");\n    };\n  }, []);\n\n  const options = data.map((d) => (\n      <Option key={\"u_\" + d.value} value={d.value}>\n        <div className=\"select-option\">\n          <span>{d.text}</span>\n          <span>{d.shortCode}</span>\n        </div>\n      </Option>\n  ));\n  const usedOptions = used.map((d) => (\n      <Option key={\"s_\" + d.value} value={d.value}>\n        <div className=\"select-option\">\n          <span>{d.text}</span>\n          <span>{d.shortCode}</span>\n        </div>\n      </Option>\n  ));\n  return (\n    <Select\n        labelInValue\n        showSearch\n        value={{value: value}}\n        placeholder={props.placeholder}\n        style={props.style}\n        defaultActiveFirstOption={false}\n        showArrow={false}\n        filterOption={false}\n        onSearch={handleSearch}\n        onChange={handleChange}\n        notFoundContent={null}\n    >\n      <OptGroup label=\"ËæìÂÖ•ÊêúÁ¥¢\" key=\"search\">\n        {options}\n      </OptGroup>\n      <OptGroup label=\"ÊúÄËøë‰ΩøÁî®\" key=\"used\">\n        {usedOptions}\n      </OptGroup>\n    </Select>\n  );\n}\n\nexport default SearchInput;\n","/Users/lei.zhang/open-source/_seven4x/link/picker-chrome-extension/src/comps/EditTagGroup.js",["28","29"],"import React, { useState, useRef,useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Tag, Input, Tooltip } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport \"./EditTagGroup.css\";\n\nfunction EditableTagGroup(props) {\n  const {onChange} = props\n  const [state, setState] = useState({\n    tags: [],\n    inputVisible: false,\n    inputValue: \"\",\n    editInputIndex: -1,\n    editInputValue: \"\",\n  });\n\n  const inputRef = useRef(null);\n  const editInputRef = useRef(null);\n  useEffect(()=>{\n    if (inputRef.current != null ){\n      inputRef.current.focus();\n    }\n  },[state.inputVisible])\n\n  useEffect(()=>{\n    if (editInputRef.current != null ){\n      editInputRef.current.focus();\n    }\n  },[state.editInputIndex])\n\n  useEffect(()=>{\n    onChange(state.tags)\n  },[state.tags])\n\n  const handleClose = (removedTag) => {\n    const tags = state.tags.filter((tag) => tag !== removedTag);\n     \n    setState({ ...state, tags });\n  };\n\n  const showInput = () => {\n    setState({ ...state, inputVisible: true });\n   \n   \n  };\n\n  const handleInputChange = (e) => {\n    setState({ ...state, inputValue: e.target.value });\n  };\n\n  const handleInputConfirm = () => {\n    const { inputValue } = state;\n    let { tags } = state;\n    if (inputValue && tags.indexOf(inputValue) === -1) {\n      tags = [...tags, inputValue];\n    }\n   \n    setState({\n      ...state,\n      tags,\n      inputVisible: false,\n      inputValue: \"\",\n    });\n  };\n\n  const handleEditInputChange = (e) => {\n    setState({ ...state, editInputValue: e.target.value });\n  };\n\n  const handleEditInputConfirm = () => {\n    let { tags, editInputIndex, editInputValue } = state;\n    const newTags = [...tags];\n    newTags[editInputIndex] = editInputValue;\n    setState({\n      ...state,\n      tags: newTags,\n      editInputIndex: -1,\n      editInputValue: \"\",\n    });\n  };\n\n \n  const {\n    tags,\n    inputVisible,\n    inputValue,\n    editInputIndex,\n    editInputValue,\n  } = state;\n\n  return (\n    <>\n      {tags.map((tag, index) => {\n        if (editInputIndex === index) {\n          return (\n            <Input\n              ref={editInputRef}\n              key={tag}\n              size=\"small\"\n              className=\"tag-input\"\n              value={editInputValue}\n              onChange={handleEditInputChange}\n              onBlur={handleEditInputConfirm}\n              onPressEnter={handleEditInputConfirm}\n            />\n          );\n        }\n\n        const isLongTag = tag.length > 20;\n\n        const tagElem = (\n          <Tag\n            className=\"edit-tag\"\n            key={tag}\n            closable={true}\n            onClose={() => handleClose(tag)}\n          >\n            <span\n              onDoubleClick={(e) => {\n                setState({\n                  ...state,\n                  editInputIndex: index,\n                  editInputValue: tag,\n                });\n                e.preventDefault();\n              }}\n            >\n              {isLongTag ? `${tag.slice(0, 20)}...` : tag}\n            </span>\n          </Tag>\n        );\n        return isLongTag ? (\n          <Tooltip title={tag} key={tag}>\n            {tagElem}\n          </Tooltip>\n        ) : (\n          tagElem\n        );\n      })}\n      {inputVisible && (\n        <Input\n          ref={inputRef}\n          type=\"text\"\n          size=\"small\"\n          className=\"tag-input\"\n          value={inputValue}\n          onChange={handleInputChange}\n          onBlur={handleInputConfirm}\n          onPressEnter={handleInputConfirm}\n        />\n      )}\n      {!inputVisible && (\n        <Tag className=\"site-tag-plus\" onClick={showInput}>\n          <PlusOutlined /> Ê∑ªÂä†Ê†áÁ≠æ\n        </Tag>\n      )}\n    </>\n  );\n}\n\nexport default EditableTagGroup;\n",{"ruleId":"30","severity":1,"message":"31","line":56,"column":8,"nodeType":"32","endLine":56,"endColumn":10,"suggestions":"33"},{"ruleId":"34","severity":1,"message":"35","line":152,"column":13,"nodeType":"36","endLine":154,"endColumn":16},{"ruleId":"30","severity":1,"message":"37","line":88,"column":6,"nodeType":"32","endLine":88,"endColumn":8,"suggestions":"38"},{"ruleId":"39","severity":1,"message":"40","line":2,"column":8,"nodeType":"41","messageId":"42","endLine":2,"endColumn":16},{"ruleId":"30","severity":1,"message":"37","line":33,"column":5,"nodeType":"32","endLine":33,"endColumn":17,"suggestions":"43"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.","ArrayExpression",["44"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has a missing dependency: 'onChange'. Either include it or remove the dependency array.",["45"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar",["46"],{"desc":"47","fix":"48"},{"desc":"49","fix":"50"},{"desc":"51","fix":"52"},"Update the dependencies array to be: [form]",{"range":"53","text":"54"},"Update the dependencies array to be: [onChange]",{"range":"55","text":"56"},"Update the dependencies array to be: [onChange, state.tags]",{"range":"57","text":"58"},[1583,1585],"[form]",[2027,2029],"[onChange]",[797,809],"[onChange, state.tags]"]